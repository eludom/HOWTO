#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:2
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Installing Zeek (Bro) on Ubuntu 18.10 and Initial Use
#+DATE: <2018-12-16 07:13:33 Sunday>
#+AUTHOR: George Jones
#+EMAIL: eludom@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.0.50.1 (Org mode 9.0.2)

* What Is This?
  These are my notes from installing and learning Zeek.  What's here
  is mostly "how", e.g. the steps I executed.  Updated from earlier
  note on installing Bro.

  These are both notes-to-self in case I want to repeat these
  processes later and notes to anyone else who wants a fairly
  step-by-step process.

  - what :: installing zeek on Unbutu 18.10
  - why :: learning zeek, from the ground up.  Generate data for viz,
           streaming, etc.
  - who :: gmj@pobox.com
  - when :: 2018-12-15
  - where :: Ubuntu Laptop running 18.10
  - how :: Steps I Mostly following this https://www.bro.org/sphinx/install/install.html and documenting the  steps

* DONE Get the latest zeek source
  #+begin_example
  mkdir -p ~/src
  cd ~/src
  git clone --recursive https://github.com/zeek/zeek
  #+end_example

* DONE Install the prereqs
  #+begin_example
  sudo apt-get install cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev
  #+end_example

* DONE Install  optional geoip lib

  #+begin_example
  sudo apt-get install libgeoip-dev
  wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
  gunzip GeoLiteCity.dat.gz
  sudo  mv GeoLiteCity.dat /usr/share/GeoIP/

  # this may be cheating and may or may not work
  cd /usr/share/GeoIP
  ln -s GeoLiteCity.dat GeoIPCity.dat
  #+end_example

* DONE compile zeek
  This takes /a while/..

  #+begin_example
   cd ~/src/bro
   ./configure
   make
  #+end_example

* DONE install zeek
  #+begin_example
   sudo make install
  #+end_example

  Nota Bene: The binaries and directories are still called bro*, not
  zeek*

* DONE [4/4] configure zeek
** DONE Set up the path
   Put this somewhere where it will get executed
   #+begin_example
   export PATH=/usr/local/bro/bin:$PATH
   #+end_example

   May want to add to /etc/environment and/or other places then =$ source /etc/env=

** DONE Set up local mail delivery

   I set up local mail delivery with postfix so that bro would have
   somewhere to dump mail reports

   #+begin_example
   sudo apt-get install postfix
   sudo dpkg-reconfigure postfix
   sudo apt-get install mailutils
   sudo postfix start
   #+end_example

   During reconfigure, I set up for local delivery and had root mail
   delivered to my main user account on the box (the one created when
   I installed ubuntu)

   And to test /old school/ local mail delivery...
   #+begin_example
   gmj@ed ~ $ echo "an interesting message" | mailx gmj -s "with some subject"
   gmj@ed ~ $ from
   George Jones	bar
   George Jones	with some subject
   #+end_example

   See this if you need help
   https://help.ubuntu.com/community/PostfixBasicSetupHowto

** DONE Install wireshark, find your active interface(s)

  I installed wireshark, mostly because it is handy to have around,
  but in this case, I also needed to know what my local active network
  interfaces were so I could monitor them

  #+begin_example
  sudo apt-get install wireshark
  #+end_example

  I chose the option to allow non-root users to capture packets.
  I also added my login account to the /wireshark/ group, which you
  can do (maybe the hard way) with

  #+begin_example
  sudo vigr
  sudo vigr -s
  #+end_example

  then log out/log back in so the changes will take.   Run wireshark
  and note the name(s) of the interfaces that have traffic

** DONE Edit config files
   In =/sudo::/usr/local/bro/etc/node.cfg= I made the
   following changes to listen to the local wireless interface:

   #+begin_example
   #interface=eth0  # you may use this under normal curcumstances
   interface=wlp2s0   # capturing Ubuntu wireless interface
   #+end_example

   I took the defaults in broctl.cfg and networks.cfg

* DONE Run broctl to install and start
  #+begin_example
   sudo bash
   export PATH=/usr/local/bro/bin:$PATH
   broctl
   [BroControl] > install
   [BroControl] > start
  #+end_example
* DONE Look at what's landing in the logs
  Look at what's landing in the logs
  =/usr/local/bro/logs/current/=

** Example Log: conn.log - raw
    #+begin_example
    #separator \x09
    #set_separator	,
    #empty_field	(empty)
    #unset_field	-
    #path	conn
    #open	2017-01-14-08-14-00
    #fields	ts	uid	id.orig_h	id.orig_p	id.resp_h	id.resp_p	proto	service	duration	orig_bytes	resp_bytes	conn_state	local_orig	local_resp	missed_bytes	history	orig_pkts	orig_ip_bytes	resp_pkts	resp_ip_bytes	tunnel_parents
    #types	time	string	addr	port	addr	port	enum	string	interval	count	count	string	bool	bool	count	string	count	count	count	count	set[string]
    1484403228.025398	CJn7CC45hBZAGTU7Ej	192.168.86.105	55690	192.150.187.43	443	tcp	ssl	7.019289	929	66987	SF	T	F	0	ShADadtfF	55	4143	58	71502	(empty)
    1484403230.326955	CPJe2b2eytUnC2fKU7	192.168.86.105	55908	192.150.187.43	443	tcp	ssl	5.706497	668	6329	SF	T	F	0	ShADadtfF	13	1388	12	6961	(empty)
    #+end_example

** Example Log: conn.log - in columns
    #+begin_example
cat conn.log | sed -e 's/\#fields//' -e 's/\#types//' | column -t | less -RS

#separator         \x09
#set_separator     ,
#empty_field       (empty)
#unset_field       -
#path              conn
#open              2017-01-14-09-00-06
ts                 uid                  id.orig_h                  id.orig_p  id.resp_h
time               string               addr                       port       addr
1484406001.786522  CYp3CeHKLzn3ME3R8    fe80::60f9:1123:e071:d508  41096      fe80::e0b6:a28d:6a6e:
1484406002.273936  C4HGUk3oBXkhwMeK2j   192.168.86.105             60728      151.101.192.133
1484406002.274152  CAQqcv1c1E1lxPR53    192.168.86.105             60730      151.101.192.133
1484405955.263074  CLHD0c3Ewd4xTq1rpc   192.168.86.105             42809      216.58.217.142
    #+end_example

** Example Log: software.log - raw
    #+begin_example
#separator \x09
#set_separator	,
#empty_field	(empty)
#unset_field	-
#path	software
#open	2017-01-14-08-16-34
#fields	ts	host	host_p	software_type	name	version.major	version.minor	version.minor2	version.minor3	version.addl	unparsed_version
#types	time	addr	port	enum	string	count	count	count	count	string	string
1484403394.069088	192.168.86.105	-	HTTP::BROWSER	URL/Emacs Emacs	26	0	50	1	X11	URL/Emacs Emacs/26.0.50.1 (X11; x86_64-pc-linux-gnu)
    #+end_example

** If You Are Not Seeing Logs
   if =/usr/local/bro/logs/current/reporter.log= says something like

   #+BEGIN_EXAMPLE
   1484701385.270433	Reporter::WARNING	Your interface is likely receiving invalid TCP checksums, most likely from NIC checksum offloading.  By default, packets with invalid checksums are discarded by Bro unless using the -C command-line option or toggling the 'ignore_checksums' variable.  Alternatively, disable checksum offloading by the network adapter to ensure Bro analyzes the actual checksums that are transmitted.	/usr/local/bro/share/bro/base/misc/find-checksum-offloading.bro, line 54
   #+END_EXAMPLE

   Try adding

   #+BEGIN_EXAMPLE
   # ignore bad checksums
   redef ignore_checksums = T;
   #+END_EXAMPLE

   To =/usr/local/bro/share/bro/site/local.bro= and restarting

   #+BEGIN_EXAMPLE
   [BroControl] > deploy
   #+END_EXAMPLE

** Try generating some traffic and then look at the logs again
   #+BEGIN_EXAMPLE
   cd /tmp
   wget www.compuserve.com
   #+END_EXAMPLE
* DONE Make sure it bro restarts if it dies
  https://www.bro.org/sphinx/components/broctl/README.html#id8

  suggests the following cron entry

  #+begin_example
   */5 * * * * /usr/local/bro/bin/broctl cron
  #+end_example

  which restarts bro if =broctl status= reports "crashed"

* DONE Some useful bash setup
  #+begin_example
broLessFunc() {
    #Alias for listing or viewing bro logs
    #
    #  $1 = log name
    #  $2 = grep string (optional)
    #
    # "bl"              - list current bro logs
    # "bl dns.log"      - view current dns.log
    # "bl /usr/local/bro/logs/2018-12-16/dns.04:44:12-05:00:00.log.gz"
    #			- view a specific log
    #
    # Note: arrow keys will work for scrolling left/right

    # set up grep filter if $2 provided

    if [ -z "$2" ]; then
        grep=cat
    else
        grep="grep $2"
    fi

    # list current bro logs if no argument
    if [ -z "$1" ]; then
        ls -lt /usr/local/bro/logs/current/*
    else

        # use full path if given
        if [ -f $1 ]; then
            logfile=$1
        else
            # Default to viewing current bro log
            logfile=/usr/local/bro/logs/current/$1
        fi

        # use zcat if logfile ends in .gz
        if [[ $logfile == *.gz ]]; then
            cat=zcat
        else
            cat=cat
        fi

        # cat the logfile, pretty-printing columns and use less
        if [ -f $logfile ]; then
            $cat $logfile | sed -e 's/\#fields//' -e 's/\#types//' | $grep | column -t | less -RS
        else
            echo $logfile does not exist
        fi
    fi
}

# define an alias for it
alias bl=broLessFunc
  #+end_example

  to see the connection log

  #+begin_example
  bl conn.log
  #+end_example

  to see only http.

  #+begin_example
  bl conn.log http
  #+end_example

  This the start of a poor man's [[https://tools.netsa.cert.org/silk/rwfilter.html][rwfilter]]

* Collect more stuff
** DONE Modify local.bro
   #+begin_example


diff --git a/local.bro b/local.bro
index 9f8be4b..a152da4 100644
--- a/local.bro
+++ b/local.bro
@@ -41,7 +41,7 @@
 @load protocols/http/software
 # The detect-webapps script could possibly cause performance trouble when
 # running on live traffic.  Enable it cautiously.
-#@load protocols/http/detect-webapps
+@load protocols/http/detect-webapps

 # This script detects DNS results pointing toward your Site::local_nets
 # where the name is not part of your local DNS zone and is being hosted
@@ -64,7 +64,7 @@

 # Uncomment the following line to check each SSL certificate hash against the ICSI
 # certificate notary service; see http://notary.icsi.berkeley.edu .
-# @load protocols/ssl/notary
+@load protocols/ssl/notary

 # If you have libGeoIP support built in, do some geographic detections and
 # logging for SSH traffic.
@@ -95,8 +95,18 @@

 # Uncomment the following line to enable logging of link-layer addresses. Enabling
 # this adds the link-layer address for each connection endpoint to the conn.log file.
-# @load policy/protocols/conn/mac-logging
+@load policy/protocols/conn/mac-logging

 # Uncomment the following line to enable the SMB analyzer.  The analyzer
 # is currently considered a preview and therefore not loaded by default.
 # @load policy/protocols/smb
+
+
+#
+# gmj. Added from examples
+#
+
+redef Notice::ignored_types += { SSL::Invalid_Server_Cert };
+
+
+

   #+end_example
** DONE restart
   #+begin_example
   [BroControl] > install
   #+end_example
* Some Possible Next Steps
** Install some tools to enable analysis
*** Watch the traffic, get a feel for it
*** Feed to ELK stack???
*** Streaming to S3 for Analysis
     - Possibly stream into S3 to allow analysis with QuickSight or
       other tools.
     - modified version of this IOT->Firehose->Athena->Quicksite tool chain?
       https://aws.amazon.com/blogs/big-data/derive-insights-from-iot-in-minutes-using-aws-iot-amazon-kinesis-firehose-amazon-athena-and-amazon-quicksight/
*** Traffic Visualization
    Possibly who-talks-to-who-how-much graph with neo4j (or similar)
    to enable visualization traffic from one host
